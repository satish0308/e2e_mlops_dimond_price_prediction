{
    "models": {
        "CatBoosting Regressor": "CatBoostRegressor(verbose=False)",
        "Linear Regression": "LinearRegression()",
        "Random Forest Regressor": "RandomForestRegressor()",
        "K-Neighbors Regressor": "KNeighborsRegressor()",
        "Decision Tree": "DecisionTreeRegressor()",
        "XGBRegressor": "XGBRegressor()",
        "AdaBoost Regressor": "AdaBoostRegressor()"
    },
    "params": {
        "Decision Tree": {
            "criterion": [
                "squared_error"
            ],
            "splitter": [
                "best"
            ],
            "max_features": [
                "sqrt"
            ]
        },
        "K-Neighbors Regressor": {},
        "Random Forest Regressor": {
            "criterion": [
                "squared_error"
            ],
            "max_features": [
                "sqrt"
            ],
            "n_estimators": [
                8
            ]
        },
        "Gradient Boosting": {
            "loss": [
                "squared_error"
            ],
            "learning_rate": [
                0.1
            ],
            "subsample": [
                0.6
            ],
            "criterion": [
                "squared_error"
            ],
            "max_features": [
                "auto"
            ],
            "n_estimators": [
                8
            ]
        },
        "Linear Regression": {},
        "XGBRegressor": {
            "learning_rate": [
                0.1
            ],
            "n_estimators": [
                8
            ]
        },
        "CatBoosting Regressor": {
            "depth": [
                6
            ],
            "learning_rate": [
                0.01
            ],
            "iterations": [
                30
            ]
        },
        "AdaBoost Regressor": {
            "learning_rate": [
                0.1
            ],
            "loss": [
                "linear"
            ],
            "n_estimators": [
                8
            ]
        }
    }
}